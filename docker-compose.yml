version: '3'
services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hadoop-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    expose:
      - 6379
    networks:
      - hadoop-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  namenode:
    build: .
    container_name: namenode
    hostname: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - namenode_data:/hadoop/dfs/name
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    networks:
      - hadoop-net
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
      - HIVE_HOME=${HIVE_HOME}
      - HBASE_HOME=${HBASE_HOME}
      - JAVA_HOME=${JAVA_HOME}
    command: >
      bash -c "
      $HADOOP_HOME/bin/hdfs namenode -format -force &&
      $HADOOP_HOME/sbin/hadoop-daemon.sh start namenode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode1:
    build: .
    container_name: datanode1
    hostname: datanode1
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode1_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode2:
    build: .
    container_name: datanode2
    hostname: datanode2
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode2_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode3:
    build: .
    container_name: datanode3
    hostname: datanode3
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode3_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode4:
    build: .
    container_name: datanode4
    hostname: datanode4
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode4_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode5:
    build: .
    container_name: datanode5
    hostname: datanode5
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode5_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode6:
    build: .
    container_name: datanode6
    hostname: datanode6
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode6_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode7:
    build: .
    container_name: datanode7
    hostname: datanode7
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode7_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  datanode8:
    build: .
    container_name: datanode8
    hostname: datanode8
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - datanode8_data:/hadoop/dfs/data
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/hadoop-daemon.sh start datanode &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  resourcemanager:
    build: .
    container_name: resourcemanager
    hostname: resourcemanager
    environment:
      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager
      - YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032
      - HADOOP_HOME=${HADOOP_HOME}
    ports:
      - "8088:8088"
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - namenode
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start resourcemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager1:
    build: .
    container_name: nodemanager1
    hostname: nodemanager1
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager2:
    build: .
    container_name: nodemanager2
    hostname: nodemanager2
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager3:
    build: .
    container_name: nodemanager3
    hostname: nodemanager3
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager4:
    build: .
    container_name: nodemanager4
    hostname: nodemanager4
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager5:
    build: .
    container_name: nodemanager5
    hostname: nodemanager5
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager6:
    build: .
    container_name: nodemanager6
    hostname: nodemanager6
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager7:
    build: .
    container_name: nodemanager7
    hostname: nodemanager7
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  nodemanager8:
    build: .
    container_name: nodemanager8
    hostname: nodemanager8
    environment:
      - HADOOP_HOME=${HADOOP_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
    depends_on:
      - resourcemanager
    networks:
      - hadoop-net
    command: >
      bash -c "
      $HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager &&
      tail -F $HADOOP_HOME/logs/hadoop-*.log
      "

  hbase:
    build: .
    container_name: hbase
    hostname: hbase
    environment:
      - HBASE_CONF_DIR=${HBASE_HOME}/conf
      - HBASE_HOME=${HBASE_HOME}
    command: >
      bash -c "
      ${HBASE_HOME}/bin/start-hbase.sh
      "
    ports:
      - "16010:16010"
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
      - ./config/hbase:/usr/local/hbase/conf
    networks:
      - hadoop-net
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3
      - datanode4
      - datanode5
      - datanode6
      - datanode7
      - datanode8

  hive-metastore:
    build: .
    container_name: hive-metastore
    hostname: hive-metastore
    environment:
      - HIVE_HOME=${HIVE_HOME}
      - HADOOP_HOME=${HADOOP_HOME}
      - HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop
      - JAVA_HOME=${JAVA_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
      - ./config/hive:/usr/local/hive/conf
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3
      - datanode4
      - datanode5
      - datanode6
      - datanode7
      - datanode8
    command: >
      bash -c "
      ${HADOOP_HOME}/bin/hdfs dfs -mkdir -p /tmp &&
      ${HADOOP_HOME}/bin/hdfs dfs -mkdir -p /user/hive/warehouse &&
      ${HADOOP_HOME}/bin/hdfs dfs -chmod g+w /tmp &&
      ${HADOOP_HOME}/bin/hdfs dfs -chmod g+w /user/hive/warehouse &&
      ${HIVE_HOME}/bin/schematool -dbType derby -initSchema &&
      ${HIVE_HOME}/bin/hive --service metastore
      "
    ports:
      - "9083:9083"
    networks:
      - hadoop-net

  hive-server:
    build: .
    container_name: hive-server
    hostname: hive-server
    environment:
      - HIVE_HOME=${HIVE_HOME}
      - HADOOP_HOME=${HADOOP_HOME}
      - HADOOP_CONF_DIR=${HADOOP_HOME}/etc/hadoop
      - JAVA_HOME=${JAVA_HOME}
    volumes:
      - ./config/hadoop:/usr/local/hadoop/etc/hadoop
      - ./config/hive:/usr/local/hive/conf
    depends_on:
      - hive-metastore
    command: >
      bash -c "
      ${HIVE_HOME}/bin/hive --service hiveserver2
      "
    ports:
      - "10000:10000"
    networks:
      - hadoop-net

  airflow-webserver:
    image: apache/airflow:2.9.1
    container_name: airflow-webserver
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    command: webserver
    networks:
      - hadoop-net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    image: apache/airflow:2.9.1
    container_name: airflow-scheduler
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    networks:
      - hadoop-net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    image: apache/airflow:2.9.1
    container_name: airflow-worker
    restart: always
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    command: celery worker
    networks:
      - hadoop-net
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    image: apache/airflow:2.9.1
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    user: "0:0"
    volumes:
      - .:/sources
    networks:
      - hadoop-net

networks:
  hadoop-net:
    driver: bridge

volumes:
  postgres_data:
  namenode_data:
  datanode1_data:
  datanode2_data:
  datanode3_data:
  datanode4_data:
  datanode5_data:
  datanode6_data:
  datanode7_data:
  datanode8_data: